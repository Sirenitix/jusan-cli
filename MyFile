//package Jusan_Singularity_tasks;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class MyFile {

    static String[] children = new String[]{};


    public static void listDirectory(String path) {
        children = new String[]{};
        if (path.contains("ls") && !path.contains("ls_py")) {
            String directory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(directory);
            if(dir.list() != null){
                children = dir.list();
            }else {
                System.out.println("неверная команда");
            }
            for (String child : children) {
                System.out.println(child);
            }
        }
    }

    public static void listPythonFiles(String path) {
        children = new String[]{};
        if (path.contains("ls_py")) {
            String directory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(directory);
            if(dir.list() != null){
                children = dir.list();
            }else {
                System.out.println("неверная команда");
            }
            for (String child : children) {
                if(child.contains(".py")){
                    System.out.println(child);
                }
            }
        }
    }

    public static void isDirectory(String path) {
        if (path.contains("is_dir")) {
            String currentDirectory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(currentDirectory);
            if(dir != null) {
                System.out.println(dir.isDirectory());
            }

        }
    }

    public static void define(String path) {
        if (path.contains("define")) {
            String currentDirectory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(currentDirectory);
            if(dir != null) {
                if(dir.isFile()){
                    System.out.println("файл");
                }
                if (dir.isDirectory()){
                    System.out.println("директория");
                }
            }
        }
    }

    public static void printPermissions(String path) {
        if (path.contains("readmod")) {
            String currentDirectory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(currentDirectory);
            if(dir != null) {
                if(dir.isFile()){
                    System.out.print(dir.canRead() ? "r" : "");
                    System.out.print(dir.canWrite() ? "w" : "");
                    System.out.print(dir.canExecute() ? "x" : "");
                    System.out.println("");
                }
            }
        }
    }

    public static void setPermissions(String path, String permissions) {
        if (path.contains("setmod")) {
            String currentDirectory = path.split(" ")[1];
            File dir = new File(currentDirectory);
            if(dir != null) {
                if(dir.isFile()){
                    if(permissions.contains("read")){
                        dir.setReadable(true);
                        System.out.println("даны права на чтение");
                    }
                    if(permissions.contains("write")){
                        dir.setReadable(true);
                        System.out.println("даны права на запись");
                    }
                    if(permissions.contains("execute")){
                        dir.setExecutable(true);
                        System.out.println("даны права на выполнение");
                    }
                }
            }
        }
    }

    public static void printContent(String path) throws FileNotFoundException {
        if (path.contains("cat")) {
            String currentDirectory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(currentDirectory);
            if(dir != null) {
                if(dir.isFile()){
                    Scanner sc = new Scanner(dir);
                    while (sc.hasNextLine())
                        System.out.println(sc.nextLine());
                    }
                }
            }
        }

    public static void appendFooter(String path) {
        if(path.contains("append")) {
            String currentDirectory = path.substring(path.indexOf(' ') + 1);
            System.out.println(currentDirectory + "# Autogenerated line");
        }
    }

    public static void createBackup(String path) throws IOException {
        if (path.contains("bc")) {
            String currentDirectory = path.substring(path.indexOf(' ') + 1);
            File dir = new File(currentDirectory+"\\\\\\\\temp");
            File checkDir = new File(currentDirectory);
            Date date = new Date();
            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
            File newFile = new File(currentDirectory+"\\temp"+ "\\" + formatter.format(date) + ".backup");
            if(dir != null && checkDir.isDirectory()) {
                dir.mkdir();
                newFile.createNewFile();
                System.out.println("резервная копия успешно создана");
            }else {
                System.out.println("неверные входные данные");
            }
        }
    }

    public static void printLongestWord(String path) throws FileNotFoundException {
        if (path.contains("greplong")) {
        String longestWord = "";
        String currentDirectory = path.substring(path.indexOf(' ') + 1);
        String current;
        Scanner scan = new Scanner(new File(currentDirectory));

        while (scan.hasNext()) {
            current = scan.next();
            if (current.length() > longestWord.length()) {
                longestWord = current;
            }

        }
        System.out.println(longestWord);
    }
}

    public static void help() {
        System.out.println("MyFS 1.0 команды:\n" +
                "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                "setmod <path> <perm>    устанавливает права для файла `path(read,write,execute)`\n" +
                "cat <path>              выводит контент файла\n" +
                "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
                "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                "greplong <path>         выводит самое длинное слово в файле\n" +
                "help                    выводит список команд и их описание\n" +
                "exit                    завершает работу программы");
    }

    public static void exit() { System.exit(0);}

    public static void main(String[] args) throws IOException {

        System.out.println("MyFS 1.0 команды:\n" +
                "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                "setmod <path> <perm>    устанавливает права для файла `path(read,write,execute)`\n" +
                "cat <path>              выводит контент файла\n" +
                "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
                "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                "greplong <path>         выводит самое длинное слово в файле\n" +
                "help                    выводит список команд и их описание\n" +
                "exit                    завершает работу программы");



        while (true) {

            Scanner newScanner = new Scanner(System.in);
            System.out.print(">");
            String userEntry = newScanner.nextLine();

            listDirectory(userEntry);
            listPythonFiles(userEntry);
            isDirectory(userEntry);
            define(userEntry);
            printPermissions(userEntry);
            setPermissions(userEntry, userEntry);
            printContent(userEntry);
            appendFooter(userEntry);
            createBackup(userEntry);
            printLongestWord(userEntry);
            if(userEntry.contains("help") == true) {help();}
            if(userEntry.contains("exit") == true) {exit();}
        }
    }
}
